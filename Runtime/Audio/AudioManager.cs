using System.Collections.Generic;
using System.Linq;
using MokomoGamesLib.Runtime.Audio.ResourceMasterTable;
using MokomoGamesLib.Runtime.Audio.ResourceMasterTable.AutoGenerated;
using MokomoGamesLib.Runtime.Audio.Speakers;
using UnityEngine;

namespace MokomoGamesLib.Runtime.Audio
{
    [RequireComponent(typeof(MasterTable))]
    [RequireComponent(typeof(ObjectPool.ObjectPool))]
    public class AudioManager : MonoBehaviour
    {
        private const int DefaultPoolSpeakerNum = 5;
        private MasterTable _masterTable;
        private Dictionary<Speaker, SpeakerPresenter> _speakerCashes;
        private ObjectPool.ObjectPool _speakerPool;

        private void Awake()
        {
            _masterTable = GetComponent<MasterTable>();
            _speakerCashes = new Dictionary<Speaker, SpeakerPresenter>();
            _speakerPool = GetComponent<ObjectPool.ObjectPool>();
            _speakerPool.Pool<SpeakerPresenter>(DefaultPoolSpeakerNum);
        }

        public SpeakerPresenter GetSpeaker(SoundName soundName)
        {
            var cacheSpeaker = _speakerCashes.FirstOrDefault(x => x.Key.SoundName == soundName).Value;
            if (cacheSpeaker != null) return cacheSpeaker;

            var speakerPresenter = _speakerPool.Get<SpeakerPresenter>();
            var resourceRecord = _masterTable.Find(soundName);
            if (resourceRecord == null) return null;

            // TODO: 同じサウンドでも場面に応じたボリューム設定ができない問題はどうにかする
            var speaker = new Speaker(resourceRecord.SoundName, resourceRecord.AudioClip, resourceRecord.SourceVolume);
            speaker.OnChangedVolume += self =>
            {
                speakerPresenter.SetVolume(self.Volume);
            };
            speakerPresenter.Initialize(speaker);
            _speakerCashes.Add(speaker, speakerPresenter);
            return speakerPresenter;
        }
    }
}